# main.py
import asyncio
import logging
import os

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiohttp import web

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- CONFIG ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# --- BOT SETUP ---
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# --- –ú–µ–Ω—é –ø–∏—Ü—Ü ---
pizzas = {
    "–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞": {"price": 195, "desc": "–ü–∏—Ü—Ü–∞-—Å–æ—É—Å, –º–Ω–æ–≥–æ —Å—ã—Ä–∞ '–ú–æ—Ü–∞—Ä–µ–ª–ª–∞', –æ—Ä–µ–≥–∞–Ω–æ"},
    "–ì–∞–≤–∞–π—Å–∫–∞—è": {"price": 295, "desc": "–ü–∏—Ü—Ü–∞-—Å–æ—É—Å, –∞–Ω–∞–Ω–∞—Å, –≤–µ—Ç—á–∏–Ω–∞, —Å—ã—Ä '–ú–æ—Ü–∞—Ä–µ–ª–ª–∞'"},
    "–¶—ã–ø–ª—ë–Ω–æ–∫ –ë–∞—Ä–±–µ–∫—é": {"price": 295, "desc": "–°–æ—É—Å –±–∞—Ä–±–µ–∫—é, –∫—Ä–∞—Å–Ω—ã–π –ª—É–∫, —Ü—ã–ø–ª–µ–Ω–æ–∫, –±–µ–∫–æ–Ω, —Å—ã—Ä '–ú–æ—Ü–∞—Ä–µ–ª–ª–∞'"},
    "–ì—Ä–∏–±–Ω–∞—è": {"price": 250, "desc": "–ß–µ—Å–Ω–æ—á–Ω—ã–π —Å–æ—É—Å, —à–∞–º–ø–∏–Ω—å–æ–Ω—ã, –≤–µ—Ç—á–∏–Ω–∞, —Å—ã—Ä '–ú–æ—Ü–∞—Ä–µ–ª–ª–∞'"},
    "–°—ã—Ä–Ω–∞—è –∫—É—Ä–æ—á–∫–∞": {"price": 315, "desc": "–°—ã—Ä–Ω—ã–π —Å–æ—É—Å, –¶—ã–ø–ª–µ–Ω–æ–∫, –º–Ω–æ–≥–æ —Å—ã—Ä–∞ '–ú–æ—Ü–∞—Ä–µ–ª–ª–∞', –∫—É–Ω–∂—É—Ç–Ω—ã–µ –±–æ—Ä—Ç–∏–∫–∏"},
    "–ü–µ–ø–ø–µ—Ä–æ–Ω–∏": {"price": 295, "desc": "–ü–∏—Ü—Ü–∞-—Å–æ—É—Å, –∫–æ–ª–±–∞—Å–∫–∏ '–ü–µ–ø–ø–µ—Ä–æ–Ω–∏', –º–Ω–æ–≥–æ —Å—ã—Ä–∞ '–ú–æ—Ü–∞—Ä–µ–ª–ª–∞'"},
    "–§–∏—Ä–º–µ–Ω–Ω–∞—è Prosto": {"price": 295, "desc": "–ü–∏—Ü—Ü–∞-—Å–æ—É—Å, —à–∞–º–ø–∏–Ω—å–æ–Ω—ã, —Å–ª–∞–¥–∫–∏–π –ø–µ—Ä–µ—Ü, –∫—Ä–∞—Å–Ω—ã–π –ª—É–∫, –º–∞—Å–ª–∏–Ω—ã, —Ü—ã–ø–ª–µ–Ω–æ–∫, –∫–æ–ª–±–∞—Å–∫–∏ '–ü–µ–ø–ø–µ—Ä–æ–Ω–∏', —Å—ã—Ä '–ú–æ—Ü–∞—Ä–µ–ª–ª–∞'"},
    "–î–≤–æ–π–Ω–∞—è –ü–µ–ø–ø–µ—Ä–æ–Ω–∏": {"price": 315, "desc": "–ü–∏—Ü—Ü–∞-—Å–æ—É—Å, —Å—ã—Ä –ú–æ—Ü–∞—Ä–µ–ª–ª–∞, –∫–æ–ª–±–∞—Å–∫–∏ –ü–µ–ø–ø–µ—Ä–æ–Ω–∏"},
    "–ö–∞–Ω—Ç—Ä–∏": {"price": 315, "desc": "–°–æ—É—Å –°—ã—Ä–Ω—ã–π, –≤–µ—Ç—á–∏–Ω–∞, –æ–º–ª–µ—Ç, —à–∞–º–ø–∏–Ω—å–æ–Ω—ã, —Ç–æ–º–∞—Ç—ã, —Å—ã—Ä –ú–æ—Ü–∞—Ä–µ–ª–ª–∞, –±–µ–∫–æ–Ω"},
    "–°—Ä–µ–¥–∏–∑–µ–º–Ω–∞—è": {"price": 335, "desc": "–ü–∏—Ü—Ü–∞-—Å–æ—É—Å, —Ç–æ–º–∞—Ç—ã, —à–∞–º–ø–∏–Ω—å–æ–Ω—ã, —Å–ª–∞–¥–∫–∏–π –ø–µ—Ä–µ—Ü, –∫—Ä–∞—Å–Ω—ã–π –ª—É–∫, –æ—Ä–µ–≥–∞–Ω–æ, —Å—ã—Ä '–§–µ—Ç–∞', –º–∞—Å–ª–∏–Ω—ã, —Å—ã—Ä '–ú–æ—Ü–∞—Ä–µ–ª–ª–∞'"},
    "–ß–∏–∫–µ–Ω –†–∞–Ω—á": {"price": 315, "desc": "–°–æ—É—Å '–†–∞–Ω—á', –¢–æ–º–∞—Ç—ã, –ß–µ—Å–Ω–æ–∫, –¶—ã–ø–ª–µ–Ω–æ–∫, –í–µ—Ç—á–∏–Ω–∞, –°—ã—Ä '–ú–æ—Ü–∞—Ä–µ–ª–ª–∞'"},
    "–ß–µ—Ç—ã—Ä–µ —Å—ã—Ä–∞": {"price": 315, "desc": "–ü–∏—Ü—Ü–∞-—Å–æ—É—Å, —Å—ã—Ä '–§–µ—Ç–∞', –°–ª–∏–≤–æ—á–Ω—ã–π —Å—ã—Ä, –ü–∞—Ä–º–µ–∑–∞–Ω, —Å—ã—Ä '–ú–æ—Ü–∞—Ä–µ–ª–ª–∞'"},
    "–ú—è—Å–Ω–∞—è": {"price": 315, "desc": "–ü–∏—Ü—Ü–∞-—Å–æ—É—Å, –∫–æ–ª–±–∞—Å–∫–∏ '–ü–µ–ø–ø–µ—Ä–æ–Ω–∏', –≥–æ–≤—è–¥–∏–Ω–∞, –≤–µ—Ç—á–∏–Ω–∞, –±–µ–∫–æ–Ω, –°—ã—Ä '–ú–æ—Ü–∞—Ä–µ–ª–ª–∞'"},
    "–ë—å—è–Ω–∫–∞": {"price": 335, "desc": "–ß–µ—Å–Ω–æ—á–Ω—ã–π —Å–æ—É—Å, —à–ø–∏–Ω–∞—Ç, —à–∞–º–ø–∏–Ω—å–æ–Ω—ã, —Ü—ã–ø–ª–µ–Ω–æ–∫, —Å–ª–∏–≤–æ—á–Ω—ã–π —Å—ã—Ä, –ü–∞—Ä–º–µ–∑–∞–Ω, —Å—ã—Ä '–ú–æ—Ü–∞—Ä–µ–ª–ª–∞'"},
    "–¢–µ—Ö–∞—Å": {"price": 335, "desc": "–ü–∏—Ü—Ü–∞-—Å–æ—É—Å, —Ç–æ–º–∞—Ç—ã, —Å–ª–∞–¥–∫–∏–π –ø–µ—Ä–µ—Ü, –∫—Ä–∞—Å–Ω—ã–π –ª—É–∫, –æ—Å—Ç—Ä—ã–µ –ø–µ—Ä—á–∏–∫–∏ –•–∞–ª–∞–ø–µ–Ω—å–æ, –≥–æ–≤—è–¥–∏–Ω–∞, —Å—ã—Ä '–ú–æ—Ü–∞—Ä–µ–ª–ª–∞'"},
    "–ú–æ—Ä—Å–∫–∞—è": {"price": 335, "desc": "–°–æ—É—Å '–†–∞–Ω—á', –∫—Ä–∞—Å–Ω—ã–π –ª—É–∫, –º–∞—Å–ª–∏–Ω—ã, '—Å–Ω–µ–∂–Ω—ã–π –∫—Ä–∞–±', –∫—Ä–µ–≤–µ—Ç–∫–∞, —Å—ã—Ä '–ú–æ—Ü–∞—Ä–µ–ª–ª–∞'"},
    "–ß–∏–∑–±—É—Ä–≥–µ—Ä": {"price": 335, "desc": "–°—ã—Ä–Ω—ã–π —Å–æ—É—Å, —Ç–æ–º–∞—Ç—ã, –∫—Ä–∞—Å–Ω—ã–π –ª—É–∫, –º–∞—Ä–∏–Ω–æ–≤–∞–Ω–Ω—ã–µ –æ–≥—É—Ä—á–∏–∫–∏, –≥–æ–≤—è–¥–∏–Ω–∞, –±–µ–∫–æ–Ω, —Å—ã—Ä '–ú–æ—Ü–∞—Ä–µ–ª–ª–∞', –∫—É–Ω–∂—É—Ç–Ω—ã–µ –±–æ—Ä—Ç–∏–∫–∏"},
    "–ê–ª—å–º–∞": {"price": 315, "desc": "–ß–µ—Å–Ω–æ—á–Ω—ã–π —Å–æ—É—Å, —Å–æ—É—Å '–ü–∞—Ä–º–µ–¥–∂–∞–Ω–æ', —Ü—ã–ø–ª–µ–Ω–æ–∫, —à–ø–∏–Ω–∞—Ç, —Ü–≤–µ—Ç–Ω–∞—è –∫–∞–ø—É—Å—Ç–∞, —Å—ã—Ä '–ú–æ—Ü–∞—Ä–µ–ª–ª–∞'"},
    "–î—é—à–µ—Å": {"price": 315, "desc": "–°–ª–∏–≤–æ—á–Ω—ã–π —Å—ã—Ä, –∂–∞—Ä–µ–Ω—ã–π –±–µ–∫–æ–Ω, –≥—Ä—É—à–∞, –º—ë–¥, —Å–æ—É—Å '–†–∞–Ω—á', –∫–æ—Ä–∏—Ü–∞, —Å—ã—Ä '–ú–æ—Ü–∞—Ä–µ–ª–ª–∞'"},
}

# --- –°–æ—É—Å—ã ---
sauces = ["üßÄ –°—ã—Ä–Ω—ã–π", "üçñ –ë–∞—Ä–±–µ–∫—é", "ü§î –ß–µ—Å–Ω–æ—á–Ω—ã–π", "ü•´ –ö–µ—Ç—á—É–ø", "üçÆ –ö–∏—Å–ª–æ-—Å–ª–∞–¥–∫–∏–π", "üå≠ –ì–æ—Ä—á–∏—á–Ω—ã–π"]

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ in-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–∫–∞–∑–æ–≤ (–ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ –ë–î –ø–æ–∑–∂–µ)
user_orders = {}

# --- –£—Ç–∏–ª–∏—Ç—ã ‚Äî –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def pizza_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for name in pizzas.keys():
        kb.add(KeyboardButton(text=name))
    return kb

def sauce_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for s in sauces:
        kb.add(KeyboardButton(text=s))
    return kb

# --- HANDLERS ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    text = "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PizzaBursa.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∏—Ü—Ü—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /menu"
    await message.answer(text, reply_markup=pizza_keyboard())

@dp.message(Command("menu"))
async def cmd_menu(message: types.Message):
    # –ü–æ–∫–∞–∂–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ + –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞
    text = "üçï –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–∏—Ü—Ü—ã:\n\n"
    for name, v in pizzas.items():
        text += f"{name} ‚Äî {v['price']} ‚ÇΩ\n–°–æ—Å—Ç–∞–≤: {v['desc']}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∏—Ü—Ü—ã."
    await message.answer(text, reply_markup=pizza_keyboard())

# –í—ã–±–æ—Ä –ø–∏—Ü—Ü—ã (—Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º —Å–æ–≤–ø–∞–¥–∞—é—â–µ–µ —Å –∫–ª—é—á–æ–º —Å–ª–æ–≤–∞—Ä—è)
@dp.message(F.text.in_(pizzas.keys()))
async def on_choose_pizza(message: types.Message):
    user_id = message.from_user.id
    pizza_name = message.text
    user_orders[user_id] = {"pizza": pizza_name}
    info = pizzas[pizza_name]
    await message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: *{pizza_name}* ‚Äî {info['price']} ‚ÇΩ\n\n–°–æ—Å—Ç–∞–≤: {info['desc']}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ—É—Å (–∏–¥—ë—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ):",
        parse_mode="Markdown",
        reply_markup=sauce_keyboard()
    )

# –í—ã–±–æ—Ä —Å–æ—É—Å–∞
@dp.message(F.text.in_(sauces))
async def on_choose_sauce(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_orders or "pizza" not in user_orders[user_id]:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∏—Ü—Ü—É. –ù–∞–ø–∏—à–∏—Ç–µ /menu", reply_markup=ReplyKeyboardRemove())
        return

    sauce = message.text
    user_orders[user_id]["sauce"] = sauce
    pizza = user_orders[user_id]["pizza"]
    price = pizzas[pizza]["price"]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (–ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω—É –∏ –≤ –ë–î)
    await message.answer(
        f"‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!\n\nüçï –ü–∏—Ü—Ü–∞: *{pizza}* ‚Äî {price} ‚ÇΩ\nü•´ –°–æ—É—Å: {sauce}\n\n"
        "–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ —Å–±–æ—Ä–∫—É. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –µ—â—ë ‚Äî /menu",
        parse_mode="Markdown",
        reply_markup=ReplyKeyboardRemove()
    )

# –õ–æ–≤–∏–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
@dp.message()
async def fallback(message: types.Message):
    await message.answer("–ù–µ –ø–æ–Ω—è–ª. –ù–∞–ø–∏—à–∏—Ç–µ /menu —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∏—Ü—Ü.", reply_markup=pizza_keyboard())

# --- Healthcheck (–¥–ª—è Koyeb) ---
async def handle_health(request):
    return web.Response(text="OK")

async def start_health_server():
    app = web.Application()
    app.router.add_get("/health", handle_health)
    runner = web.AppRunner(app)
    await runner.setup()
    port = int(os.getenv("PORT", 8000))
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()
    logger.info("Health server started on port %s", port)

# --- MAIN ---
async def main():
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook (–µ—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è) ‚Äî —ç—Ç–æ –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("Old webhook deleted (if existed).")
    except Exception as e:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å webhook: %s", e)

    # –ó–∞–ø—É—Å–∫–∞–µ–º health-server (Koyeb –±—É–¥–µ—Ç –≤–∏–¥–µ—Ç—å, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∂–∏–≤)
    await start_health_server()

    # –ó–∞–ø—É—Å–∫–∞–µ–º polling (–≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–µ)
    logger.info("Start polling")
    # start_polling –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ç–µ–∫—É—â–µ–º loop –∏ –Ω–µ –º–µ—à–∞–µ—Ç aiohttp —Å–µ—Ä–≤–µ—Ä—É
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    finally:
        logger.info("Shutting down")
